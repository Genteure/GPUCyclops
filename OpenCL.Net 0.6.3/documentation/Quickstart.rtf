{\rtf1\ansi\deff1\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\fnil\fprq0\fcharset0 Calibri;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\fnil\fprq0\fcharset0 Calibri;}{\f4\fmodern\fprq1\fcharset0 Courier New;}{\f5\fnil\fprq2\fcharset0 MS Mincho;}{\f6\fnil\fprq2\fcharset0 Tahoma;}{\f7\fnil\fprq0\fcharset0 Tahoma;}}
{\colortbl;\red0\green0\blue0;\red43\green145\blue175;\red128\green0\blue0;\red0\green176\blue80;\red0\green0\blue255;\red0\green255\blue0;\red0\green174\blue0;\red255\green255\blue0;\red128\green128\blue128;}
{\stylesheet{\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044\snext1 Normal;}
{\s2\sb240\sa120\keepn\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af6\afs28\lang255\ltrch\dbch\af5\langfe255\hich\f2\fs28\lang1044\loch\f2\fs28\lang1044\sbasedon1\snext3 Heading;}
{\s3\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044\sbasedon1\snext3 Body Text;}
{\s4\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af7\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044\sbasedon3\snext4 List;}
{\s5\sb120\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af7\afs24\lang255\ai\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\i\loch\f1\fs24\lang1044\i\sbasedon1\snext5 caption;}
{\s6\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af7\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044\sbasedon1\snext6 Index;}
}
{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}{\comment StarWriter}{\vern3100}}\deftab720
{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\pgdscnxt0 Standard;}}
{\*\pgdscno0}\paperh15840\paperw12240\margl1800\margr1800\margt1440\margb1440\sectd\sbknone\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pard\plain \ltrpar\s1\cf0\sl276\slmult1\qc{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af1\afs40\lang255\ab\ltrch\dbch\af1\langfe255\hich\f1\fs40\lang20\b\loch\f1\fs40\lang20\b {\rtlch \ltrch\loch\f1\fs40\lang20\i0\b OpenCL.Net}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af1\afs22\lang255\ab\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang20\b\loch\f1\fs22\lang20\b {\rtlch \ltrch\loch\f1\fs22\lang20\i0\b Introduction}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\fs22\lang20\loch\fs22\lang20 OpenCL.Net is a bridge from .Net languages to the OpenCL ICD. It can be used in two major ways. One is as a "direct to metal" interface to OpenCL. People who want to take this route will find what they are looking for in the class}}{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\fs22\lang20\b\loch\fs22\lang20\b  OpenCLNet.}{\cf2\rtlch\ltrch\dbch\hich\f4\fs20\b\loch\f4\fs20\b OpenCLAPI.}{\rtlch\ltrch\dbch\hich\fs22\lang20\loch\fs22\lang20  The 
class exposes pretty much every single OpenCL function. There's not much to say about this approach - refer to the OpenCL spec at Khronos(http://www.khronos.org/opencl/) for function names and descriptions. This may be the simplest approach when doing quic
k and dirty ports of C code.}}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\fs22\lang20\loch\fs22\lang20 For people who don't have strong feelings about their .Net code looking exactly like C, there is another, higher level and more .Net like option. The class}}{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\fs22\lang20\b\loch\fs22\lang20\b   OpenCLNet.}{\cf2\rtlch\ltrch\dbch\hich\f4\fs20\b\loch\f4\fs20\b OpenCL}{\rtlch\ltrch\dbch\hich\fs22\lang20\loch\fs22\lang20  provides an object oriented API, exposes OpenCL properties as .Net properties and 
simplifies some aspects of usage. It still maintains the OpenCL look and feel though. It also provides a slightly more user friendly version of the flat API, for those who would like to build alternative object frameworks.}}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang20\loch\f1\fs22\lang20 {\rtlch \ltrch\loch\f1\fs22\lang20\i0\b0 Some quick pseudocode examples:}
\par \pard\plain \ltrpar\s1\cf4\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang20\loch\f4\fs18\lang20 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 // Enumerate platforms}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\lang20\loch\f4\fs18\lang20 if( OpenCL.}}{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 NumberOfPlatforms==0 )}}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang1044\loch\f4\fs18\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang1044\i0\b0 \tab throw new Exception( "OpenCL not available" );}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\lang20\loch\f4\fs18\lang20 for( int i=0; i<OpenCL.}}{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 NumberOfPlatforms; i++ )}}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang1044\loch\f4\fs18\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang1044\i0\b0 \{}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang20\loch\f4\fs18\lang20 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 \tab Platform p = OpenCL.GetPlatform(i);}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 \}}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 
\par \pard\plain \ltrpar\s1\cf4\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang20\loch\f4\fs18\lang20 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 // Query Devices, create a Context+Command Queue and compile a program}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang20\loch\f4\fs18\lang20 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 Platform p = OpenCL.GetPlatform(0);}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 Devices[] oclDevices = p.QueryDevices(DeviceType.All);}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 Context oclContext = p.CreateDefaultContext();}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\lang20\loch\f4\fs18\lang20 CommandQueue oclCQ = oclContext}}{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 .CreateCommandQueue(}{\rtlch\ltrch\dbch\hich\f4\fs18\lang20\loch\f4\fs18\lang20 oclDevices }{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 [0], }{\cf2\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 CommandQueueProperties}{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 .PROFILING_ENABLE);}}
\par \pard\plain \ltrpar\s1\cf4\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang1044\loch\f4\fs18\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang1044\i0\b0 // Load and build source+create a kernel}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang1044\loch\f4\fs18\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang1044\i0\b0 OpenCLNet.Program program = oclContext.CreateProgramWithSource( File.ReadAllText("source.cl") );}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang1044\i0\b0 program.Build();}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang1044\i0\b0 Kernel kernel = program.CreateKernel("MyKernelName");}
\par \pard\plain \ltrpar\s1\cf4\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang1044\loch\f4\fs18\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang1044\i0\b0 // Set kernel arguments}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang20\loch\f4\fs18\lang20 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 kernel.SetArg( 0, 1L );}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 kernel.SetArg( 1, 3.141592654f );}
\par \pard\plain \ltrpar\s1\cf7\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang20\loch\f4\fs18\lang20 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 // Set argument with platform specific size}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang20\loch\f4\fs18\lang20 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 kernel.SetSizeTArg( 1, 34 );}
\par \pard\plain \ltrpar\s1\cf4\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang20\loch\f4\fs18\lang20 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 // Enqueue the kernel on a 10x10 block}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\cf2\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 IntPtr}}{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 [] globalWorkSize = }{\cf5\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 new}{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18  }{\cf2\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 IntPtr}{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 [2];}}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 globalWorkSize[0] = (}}{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\cf2\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 IntPtr}{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 )10;}}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 globalWorkSize[1] = (}}{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\cf2\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 IntPtr}{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 )10;}}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\lang20\loch\f4\fs18\lang20 oclCQ}}{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 .EnqueueNDRangeKernel(kernel, 2, }{\cf5\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 null}{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 , globalWorkSize, }{\cf5\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 null}{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 );}}
\par \pard\plain \ltrpar\s1\cf4\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang20\loch\f4\fs18\lang20 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 // Wait for all pending operations to complete}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\lang20\loch\f4\fs18\lang20 oclCQ}}{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs18\loch\f4\fs18 .Finish();}}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang20\loch\f4\fs18\lang20 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 In general, you'll find that every object has methods for every possible operation OpenCL can perform on it, with similar names as those in the standard, with the cl-prefix stripped.}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 For learning to use OpenCL in general, please refer to tutorial examples in OpenCL SDKs from vendors like ATI/nVidia or other Internet resources. General OpenCL knowledge will transfer directly to having a solid understanding of how to use this library.}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af1\afs22\lang255\ab\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang20\b\loch\f1\fs22\lang20\b {\rtlch \ltrch\loch\f1\fs22\lang20\i0\b Building the examples}
\par \pard\plain \ltrpar\s1\cf0\sl276\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa200\rtlch\af4\afs18\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs18\lang20\loch\f4\fs18\lang20 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 I have not put any work into making the distribution sexy. The projects in the examples directory are meant to be built as part of the global solution at source/OpenCLNet.sln. Trying to build them standalone will give error messages about the references no
t existing.}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 Alternatively, if you have VS2010, you might want to use the project at source\\vs2010\\OpenCLNet\\OpenCLNet.sln The advantage of the VS2010 project is that debugging works in 64 bit.(For some reason ATI's OpenCL driver consistently fails the clBuild() OpenCL
 operation unless one uses native debugging, which isn't available for 64 bit projects in VS2008. It's likely an issue with environment variables or something like that. It never even begins to compile.)}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 {\rtlch \ltrch\loch\f4\fs18\lang20\i0\b0 To get started quickly, it's probably a good idea to use the ImageCrossFade example as a starting point, as it uses a helper class for quick initialization using reasonable defaults for most machines. For real applications you may want to have more control
 over initialization and present the user with some way to select platform and devices though.}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044 
\par }